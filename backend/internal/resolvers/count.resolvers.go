package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"

	graphql1 "github.com/tuoitrevohoc/gofw-template/backend/gen/go/graphql"
	"github.com/tuoitrevohoc/gofw/packages/gofw"
	"go.uber.org/zap"
)

const countChannel = "count"

// IncreaseCount is the resolver for the increaseCount field.
func (r *mutationResolver) IncreaseCount(ctx context.Context, increase int) (int, error) {
	r.count += increase
	err := r.countPublisher.Publish(ctx, countChannel, r.count)
	if err != nil {
		gofw.ContextLogger(ctx).Error("failed to publish count", zap.Error(err))
		return 0, err
	}

	return r.count, nil
}

// Count is the resolver for the count field.
func (r *queryResolver) Count(ctx context.Context) (int, error) {
	return r.count, nil
}

// CountUpdated is the resolver for the countUpdated field.
func (r *subscriptionResolver) CountUpdated(ctx context.Context) (<-chan int, error) {
	subscription, err := r.countSubscriber.Subscribe(ctx, countChannel)

	if err != nil {
		return nil, err
	}

	ch := make(chan int)

	go func() {
		for {
			select {
			case <-ctx.Done():
				subscription.Close()
				return
			case msg := <-subscription.Channel():
				ch <- msg
			}
		}
	}()

	return ch, nil
}

// Mutation returns graphql1.MutationResolver implementation.
func (r *Resolver) Mutation() graphql1.MutationResolver { return &mutationResolver{r} }

// Subscription returns graphql1.SubscriptionResolver implementation.
func (r *Resolver) Subscription() graphql1.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
